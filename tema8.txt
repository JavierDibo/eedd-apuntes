Principales estructuras en STL
	vector
	list
	deque
	
Caracteristicas comunes de: vector, list y deque
	Son secuenciales
	Utilizan iteradores

Funciones en toda estructura STL
	Constructor por defecto y copia
	Operador asignacion
	Tamaño: size(), empty()
	Iteradores: begin(), end()
	Datos puntas: front(), back()
	Borrado: clear()
	
Iteradores de STL
	Constructor defecto y copia
	Operador asignacion
	== y !=
	++ y --
	operador*

Posicion del iterador
	Tras insertar: Elemento insertado
	Tras borrar: Elemento siguiente al borrado

vector
	push_back()
	pop_back()
	
iteradores vector

	auto it = miVec.begin()
	
	Nota: se invalidan si se modifican los vectores
	
deque
	operador[]
	push_front()
	pop_front()
	
	Basicamente una cola muy way
	
Eficiencia de deque
	Borrado.Insercion principio/final: O(1)
	Borrado.Insercion arbitraria O(n)
	
list
	doblemente enlazada
	solo iteradores
	push_front/back()
	pop_front/back()
	
auto
	keyword para declarar cosas
	
	auto it = vec.front()
	
foreach
	for chulo
	
	for (int dato: vec) // para cada dato en vec
		print(dato)
		
---

1 [F] El contenedor list<T> de STL implementa el operador [] para acceder directamente al dato almacenado en una posición
arbitraria.

Falso. list se tiene que usar mediante iteradores.

2 [V] Se ha pensado en implementar una matriz para almacenar todos los jugadores convocados en todos los partidos de todas
las jornadas de la liga de fútbol. Esta sería una posible estructura de datos para crear dicha tabla: 

	vector<vector<vector<Jugador> > > jugadores.

Verdadero. Estas declarando una estructura en 3D. Si bien no es una matriz, es una estructura factible.

3 [F] Para simular una lista circular (p.e. procesos de un S.O) en el que los datos entran siempre por el mismo lugar pero
salen en cualquier momento es igualmente eficiente utilizar una lista (list) que un vector de STL.

Falso. Los vectores tienen mala eficiencia al eliminar/insertar por delante, sería más útil una lista para el caso expuesto.

4 [V] Se ha utilizado la siguiente estructura de datos para implementar un editor de texto interactivo: 

	list<vector<char>> texto. 

La implementación de la operación pulsarTecla(char c) sería la siguiente: 

	i->insert(i->begin() + pos, c)

siendo i un iterador de la lista que apunta a la línea donde se encuentra el cursor y pos un entero positivo que
indica la posición del cursor en dicha línea.

Veradero. Se accede al vector dentro de i (de lista) obtenemos un vector "miVector"
Usamos insert(0 + pos, c) en el vector, es decir, insertamos c en la posicion pos del vector.


5 [F] Sean dos conjuntos a y b de palabras, implementados usando dos vectores de STL instanciados al tipo string.
Entonces obtener el vector c = a ∩ b (palabras que están en ambos conjuntos) requiere un tiempo cuadrático.

Falso. Si se ordenan los vectores se puede hacer una busqueda lineal O(n) para comparar los objetos.

Aunque si los vectores son aleatorios sería cuadrática O(n^2).

6 [F] La inserción de un dato d al principio de un vector v de STL mediante v.insert(v.begin(), d) requiere tiempoF
O(1).

Los vectores en STL no presentan insercion en O(1) al principio. Para esto se debería usar un deque.